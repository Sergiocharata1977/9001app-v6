const mongoose = require('mongoose');
require('dotenv').config();

// Script para limpiar colecciones duplicadas de procesos
async function cleanupCollections() {
  try {
    console.log('üöÄ Iniciando limpieza de colecciones duplicadas...');

    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI || process.env.DATABASE_URL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    console.log('‚úÖ Conectado a MongoDB');

    // Obtener lista de colecciones antes de la limpieza
    const db = mongoose.connection.db;
    const collectionsBefore = await db.listCollections().toArray();
    console.log('üìä Colecciones antes de la limpieza:', collectionsBefore.map(c => c.name));

    // Colecciones a eliminar (duplicadas)
    const collectionsToDelete = [
      'processdefinitions',
      'processdocuments',
      'processes',
      'processrecords'
    ];

    // Colecci√≥n a mantener (unificada)
    const collectionToKeep = 'processunifieds';

    console.log('üóëÔ∏è Colecciones a eliminar:', collectionsToDelete);
    console.log('‚úÖ Colecci√≥n a mantener:', collectionToKeep);

    // Confirmaci√≥n de seguridad
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    await new Promise((resolve) => {
      rl.question('‚ö†Ô∏è  ¬øEst√° seguro de que desea eliminar las colecciones duplicadas? (Escriba "S√ç" para confirmar): ', (answer) => {
        if (answer.toUpperCase() !== 'S√ç') {
          console.log('‚ùå Operaci√≥n cancelada por el usuario');
          process.exit(0);
        }
        rl.close();
        resolve();
      });
    });

    // Verificar que existe la colecci√≥n unificada antes de eliminar las otras
    const unifiedExists = await db.listCollections({ name: collectionToKeep }).hasNext();
    if (!unifiedExists) {
      console.log('‚ö†Ô∏è  Advertencia: La colecci√≥n unificada "processunifieds" no existe a√∫n.');
      console.log('üí° Recomendaci√≥n: Ejecute el seeder primero antes de la limpieza.');
    }

    // Eliminar colecciones duplicadas
    for (const collectionName of collectionsToDelete) {
      try {
        const collectionExists = await db.listCollections({ name: collectionName }).hasNext();

        if (collectionExists) {
          // Contar documentos antes de eliminar
          const count = await db.collection(collectionName).countDocuments();
          console.log(`üìà Colecci√≥n "${collectionName}": ${count} documentos`);

          // Eliminar colecci√≥n
          await db.dropCollection(collectionName);
          console.log(`‚úÖ Eliminada colecci√≥n: ${collectionName}`);
        } else {
          console.log(`‚ÑπÔ∏è  Colecci√≥n "${collectionName}" no existe, omitiendo...`);
        }
      } catch (error) {
        console.error(`‚ùå Error eliminando colecci√≥n ${collectionName}:`, error.message);
      }
    }

    // Obtener lista de colecciones despu√©s de la limpieza
    const collectionsAfter = await db.listCollections().toArray();
    console.log('üìä Colecciones despu√©s de la limpieza:', collectionsAfter.map(c => c.name));

    // Verificar colecci√≥n unificada
    const unifiedCollection = await db.collection(collectionToKeep);
    const unifiedCount = await unifiedCollection.countDocuments();
    console.log(`‚úÖ Colecci√≥n unificada "${collectionToKeep}": ${unifiedCount} documentos`);

    console.log('üéâ Limpieza completada exitosamente!');
    console.log('üìã Resumen:');
    console.log(`   - Colecciones eliminadas: ${collectionsToDelete.length}`);
    console.log(`   - Colecci√≥n mantenida: ${collectionToKeep} (${unifiedCount} documentos)`);

  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  cleanupCollections();
}

module.exports = { cleanupCollections };