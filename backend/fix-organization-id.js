const mongoose = require('mongoose');
require('dotenv').config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/9001app-v6';

async function fixOrganizationIds() {
  try {
    console.log('üîÑ Conectando a MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');
    console.log('üìä Base de datos:', mongoose.connection.db.databaseName);

    const db = mongoose.connection.db;

    // Colecciones a actualizar
    const collections = [
      'process_definitions',
      'process_records',
      'quality_objectives',
      'quality_indicators',
      'measurements',
      'users'
    ];

    console.log('\nüîß Actualizando organization_id en todas las colecciones...\n');

    for (const collectionName of collections) {
      try {
        const collection = db.collection(collectionName);
        
        // Verificar si la colecci√≥n existe
        const exists = await db.listCollections({ name: collectionName }).hasNext();
        if (!exists) {
          console.log(`‚ö†Ô∏è  Colecci√≥n "${collectionName}" no existe, saltando...`);
          continue;
        }

        // Contar documentos antes
        const countBefore = await collection.countDocuments({});
        
        // Actualizar de 'org-001' a '1'
        const result1 = await collection.updateMany(
          { organization_id: 'org-001' },
          { $set: { organization_id: '1' } }
        );

        // Actualizar de 'org-1' a '1'
        const result2 = await collection.updateMany(
          { organization_id: 'org-1' },
          { $set: { organization_id: '1' } }
        );

        // Actualizar documentos sin organization_id
        const result3 = await collection.updateMany(
          { organization_id: { $exists: false } },
          { $set: { organization_id: '1' } }
        );

        const totalModified = result1.modifiedCount + result2.modifiedCount + result3.modifiedCount;
        
        if (totalModified > 0) {
          console.log(`‚úÖ ${collectionName}:`);
          console.log(`   - Documentos totales: ${countBefore}`);
          console.log(`   - Actualizados: ${totalModified}`);
          console.log(`   - org-001 ‚Üí 1: ${result1.modifiedCount}`);
          console.log(`   - org-1 ‚Üí 1: ${result2.modifiedCount}`);
          console.log(`   - Sin org_id ‚Üí 1: ${result3.modifiedCount}`);
        } else {
          console.log(`‚úì ${collectionName}: Ya actualizado (${countBefore} docs)`);
        }

      } catch (error) {
        console.error(`‚ùå Error en ${collectionName}:`, error.message);
      }
    }

    console.log('\nüìä Verificando datos finales...\n');

    // Verificar process_definitions
    const processCount = await db.collection('process_definitions').countDocuments({ organization_id: '1' });
    console.log(`‚úÖ Procesos con organization_id='1': ${processCount}`);

    // Verificar process_records
    const recordCount = await db.collection('process_records').countDocuments({ organization_id: '1' });
    console.log(`‚úÖ Tareas con organization_id='1': ${recordCount}`);

    console.log('\n‚úÖ Actualizaci√≥n completada exitosamente');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n cerrada');
  }
}

// Ejecutar el script
fixOrganizationIds();
